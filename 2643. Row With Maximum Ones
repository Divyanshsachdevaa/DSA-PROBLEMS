//TIME COMPLEXITY: O(n^2)
//SPACE COMPLEXITY: O(1)

class Solution {
public:
    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {
        vector<int> ans;
        int count = INT_MIN;
        int rows = mat.size();
        int rowindex = -1;
        for(int i = 0; i<rows; i++){
            int onecount = 0;
            for(int j = 0; j<mat[i].size(); j++){
                if(mat[i][j] == 1){
                    onecount++;
                }
            }
            if(onecount > count){
                count = onecount;
                rowindex = i;
            }
        }
        ans.push_back(rowindex);
        ans.push_back(count);
        return ans;
    }
};
