//Time Complexity: O(n)
//Space Complexity: O(n)
//LEETCODE PROBLEM NO. 25(HARD)


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {  
   
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* curr = head;
        ListNode* forward = NULL;
        ListNode* prev = NULL;
        ListNode* temp = head;
        int listlength = 0;
        while(temp != NULL){
            listlength+=1;
            temp = temp -> next;
        }
        if(listlength < k){
            return head;
        }
        int count = k;
        while(curr != NULL && count >0){
            forward = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = forward;
            count--;
        }
        if(curr != NULL){
            head -> next = reverseKGroup(curr, k);
        }
        return prev;
    }
};
