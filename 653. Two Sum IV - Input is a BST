// inorder = sorted by using this we can think of sorted array by using binary search in sorted array we can solve this question

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    bool check(TreeNode* &root,vector<int> &vt, int k){
        int s = 0;
        int e = vt.size()-1;
        while(s<e){
            if(vt[s] + vt[e] == k){
                return true;
            }
            else if(vt[s] + vt[e] < k){
                s++;
            }
            else{
                e--;
            }
        }
        return false;
    }

    void copyIntoVector(TreeNode* &root, vector<int> &vt){
        if(root == NULL){
            return ;
        }
        copyIntoVector(root -> left, vt);
        vt.push_back(root -> val);
        copyIntoVector(root -> right, vt);
    }    
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int> vt;
        copyIntoVector(root, vt);
        return check(root, vt, k);
    }
};