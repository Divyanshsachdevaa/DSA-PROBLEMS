class Solution {
private:
    vector<int> findPrevSmaller(vector<int>& vt, int n){
        vector<int> ans(n);
        stack<int> st;
        st.push(-1);
        for(int i = 0; i<n; i++){
            int curr = vt[i];
            while(st.top() != -1 && vt[st.top()] >= curr){
                st.pop();
            }

            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }

    vector<int> findNextSmaller(vector<int>& vt, int n){
        vector<int> ans(n);
        stack<int> st;
        st.push(-1);
        for(int i = n-1; i>=0; i--){
            int curr = vt[i];
            while(st.top() != -1 && vt[st.top()] >= curr){
                st.pop();
            }

            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }
    
public:
    int largestRectangleArea(vector<int>& heights) {
        vector<int> prev = findPrevSmaller(heights, heights.size());
        vector<int> next = findNextSmaller(heights, heights.size());
        int maxArea = INT_MIN;
        for(int i = 0; i<heights.size() ; i++){
            if(next[i] == -1){
                next[i] = heights.size();
            }
            int n = next[i];
            int p = prev[i];
            int width = n-p-1;
            int length = heights[i];
            maxArea = max(maxArea,length * width);
        }
        return maxArea;
    }
};
