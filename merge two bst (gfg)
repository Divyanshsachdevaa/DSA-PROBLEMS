class Solution {
public:
    void fillBST1(Node* root1, vector<int> &bst1){
        if(root1 == NULL){
            return;
        }
        fillBST1(root1->left, bst1);
        bst1.push_back(root1->data);
        fillBST1(root1->right, bst1);
    }

    void fillBST2(Node* root2, vector<int> &bst2){
        if(root2 == NULL){
            return;
        }
        fillBST2(root2->left, bst2);
        bst2.push_back(root2->data);
        fillBST2(root2->right, bst2);
    }

    vector<int> merge(Node *root1, Node *root2) {
        vector<int> bst1;
        vector<int> bst2;
        vector<int> ans;
        
        fillBST1(root1, bst1);
        fillBST2(root2, bst2);
        
        int i = 0, j = 0;
        int x = bst1.size(), y = bst2.size();
        
        while(i < x && j < y){
            if(bst1[i] < bst2[j]){
                ans.push_back(bst1[i]);
                i++;
            } else if(bst1[i] > bst2[j]){
                ans.push_back(bst2[j]);
                j++;
            } else { // Equal values; push one and increment both pointers
                ans.push_back(bst1[i]);
                ans.push_back(bst2[j]);
                i++;
                j++;
            }
        }
        
        // Add remaining elements from bst1, if any
        while(i < x){
            ans.push_back(bst1[i]);
            i++;
        }
        // Add remaining elements from bst2, if any
        while(j < y){
            ans.push_back(bst2[j]);
            j++;
        }
        
        return ans;
    }
};
