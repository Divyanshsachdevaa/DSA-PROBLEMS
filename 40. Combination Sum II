class Solution {
private:
    void combinationSum2_helper(vector<int>& candidates,vector<vector<int>>& ansVector,vector<int>& vt, int target, int index){
        
        //base case
        if(target == 0){
            ansVector.push_back(vt);
            return ;
        }

        if(target < 0){
            return ;
        }

        for(int i = index; i < candidates.size(); i++){
            if( i > index && candidates[i] == candidates[i-1]){
                continue;
            }
            vt.push_back(candidates[i]);
            combinationSum2_helper(candidates, ansVector, vt, target - candidates[i], i+1);
            vt.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ansVector;
        vector<int> vt;
        int index = 0;
        combinationSum2_helper(candidates,ansVector,vt, target, index);
        return ansVector;
    }
};