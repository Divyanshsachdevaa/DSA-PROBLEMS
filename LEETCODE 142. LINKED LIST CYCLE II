//Time Complexity: O(n)
//Space Complexity: O(1)

//THIS QUESTION IS BASED PURELY ON OBSERVATION


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
private:
    ListNode* getintersection(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head;
        while(slow != NULL && fast != NULL){
            fast = fast -> next;
            if(fast != NULL){
                fast = fast -> next;
            }
            slow = slow -> next;

            if(slow == fast){
                return slow;
            }
        }
        return NULL;
    }
public:
    ListNode *detectCycle(ListNode *head) {
        if(getintersection(head) == NULL){
            return NULL;
        }
        else{
            ListNode* intersection = getintersection(head);
            ListNode* curr = head;
            while(curr != intersection){
                curr = curr -> next;
                intersection = intersection -> next;
            }
            return intersection;
        }
    }
};
