class Solution {
public:
    bool solve(string& s1, string& s2, string& s3, int i, int j, int k){
        if(k >= s3.length() && i >= s1.length() && j >= s2.length()){
            return true;
        }
        // 3 case bante h match with s1 ya match with s2 ya fir none
        bool match = false;
        if(s1[i] == s3[k] && i < s1.size()){
            cout << "s1[i] = " << s1[i] << " " <<i;
            cout << " s3[k] = " << s3[k] << " k: " << k << endl;
            match = match || solve(s1, s2,  s3, i+1, j, k+1);
        }
        if(s2[j] == s3[k] && j < s2.size()){
            cout << "s2[j] = " << s2[j] << " " <<j;
            cout << " s3[k] = " << s3[k] << " k: "<< k << endl;
            match = match || solve(s1, s2, s3, i, j+1, k+1);
        }
    
        return match;
    }

    int solveByMem(string& s1, string& s2, string& s3, int i, int j, int k, vector<vector<vector<int>>> &dp){
        if(k >= s3.length() && i >= s1.length() && j >= s2.length()){
            return true;
        }
        if(dp[i][j][k] != -1){
            return dp[i][j][k];
        }

        // 3 case bante h match with s1 ya match with s2 ya fir none
        bool match = false;
        if(s1[i] == s3[k] && i < s1.size()){
            match = match || solveByMem(s1, s2,  s3, i+1, j, k+1, dp);
        }
        if(s2[j] == s3[k] && j < s2.size()){
            match = match || solveByMem(s1, s2, s3, i, j+1, k+1, dp);
        }

        dp[i][j][k] = match;
        return dp[i][j][k];
    }

    int solveByTab(string& s1, string& s2, string& s3){
        vector<vector<vector<int>>> dp(s1.size()+1, vector<vector<int>> (s2.size()+1, vector<int> (s3.size()+1, 0)));
        dp[s1.size()][s2.size()][s3.size()] = 1;
        for(int i = s1.size(); i>=0; i--){
            for(int j = s2.size(); j>=0; j--){
                for(int k = s3.size(); k>=0; k--){
                    if(k >= s3.length() && i >= s1.length() && j >= s2.length()) continue;
                    bool match = false;
                    if(s1[i] == s3[k] && i < s1.size()){
                        match = match || dp[i+1] [j] [k+1];
                    }
                    if(s2[j] == s3[k] && j < s2.size()){
                        match = match || dp[i] [j+1] [k+1];
                    }
                    dp[i][j][k] = match;
                }
            }
        }
        return dp[0][0][0];
    }

    bool isInterleave(string s1, string s2, string s3) {
        vector<vector<vector<int>>> dp(s1.size()+1, vector<vector<int>> (s2.size()+1, vector<int> (s3.size()+1, -1)));
        return solveByTab(s1, s2, s3);
    }
};