//TIME COMPLEXITY: O(n logn)
//SPACE COMPLEXITY: O(n)

class Solution {
public:
    int carFleet(int target, vector<int>& position, vector<int>& speed) {
        vector<pair<int,int>> cars;
        for(int i=0; i<position.size(); i++){
            cars.push_back(make_pair(position[i] , speed[i]));
        }

        sort(cars.begin(), cars.end());
        stack<float> st;
        for(const auto& x : cars){
            float time = (target - x.first) / ((float) x.second);
            while(!st.empty() && time >= st.top()){
                st.pop();
            }
            st.push(time);
        }
        return st.size();
    }
};
