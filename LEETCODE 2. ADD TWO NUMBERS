//Time Complexity: O(max(N, M))
//Space Complexity: O(max(N, M))


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:

    void insertAtTail(ListNode* &ans_head, ListNode* &ans_tail, int digit){
        ListNode* temp = new ListNode(digit);
        if(ans_head == NULL){
            ans_head = temp;
            ans_tail = temp;
            return ;
        }
        else{
            ans_tail -> next = temp;
            ans_tail = temp;
        }

    }

    ListNode* add(ListNode* head1, ListNode* head2){
        ListNode* ans = NULL;
        ListNode* ans_head = NULL;
        ListNode* ans_tail = NULL;
        int carry = 0;
        while(head1 != NULL || head2 != NULL || carry != 0){
            int val1 = 0;
            if(head1 != NULL){
                val1 = head1 -> val;
            }
            
            int val2 = 0;
            if(head2 != NULL){
                val2 = head2 -> val;
            }

            int sum = val1 + val2 + carry;
            int digit = sum % 10;
            carry = sum / 10;
            insertAtTail(ans_head , ans_tail , digit);

            if(head1 != NULL){
                head1 = head1-> next;
            }
            if(head2 != NULL){
                head2 = head2-> next;
            }
        }

        return ans_head;
    }   
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        //step1: add both lists
        ListNode* ans = add(l1 , l2);

        //step2: return ans
        return ans;
    }
};
