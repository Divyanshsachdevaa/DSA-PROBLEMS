class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;

        // process first window
        for(int i = 0; i<k ; i++){

            // sare elements remove krdo dq m se jo current element se chote h
            while(!dq.empty() && nums[dq.back()] < nums[i]){
                // dq k front m hamesha max element pda hoga isliye pop from back krenge. piche hi chota element hoga
                dq.pop_back();
            }
            

            dq.push_back(i);
        }

        // store ans of first window
        ans.push_back(nums[dq.front()]);

        // process remaining windows
        for(int i = k; i<nums.size(); i++){
            // removal (jo index window m nahi hai)
            if(!dq.empty() && ( (i - dq.front()) >= k) ){
                dq.pop_front();
            }

            // addition (same like earlier....jo element chote ho current element se use pop krdo)
            while(!dq.empty() && nums[dq.back()] < nums[i]){
                dq.pop_back();
            }

            dq.push_back(i);

            // ans store
            ans.push_back(nums[dq.front()]);
        }

        return ans;
    }
};