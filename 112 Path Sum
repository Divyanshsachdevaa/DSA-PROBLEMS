/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool solve(TreeNode* root, int targetSum, int sum, bool res){
        if(root == NULL){
            return false;
        }

        sum+=root -> val;

        if(root -> left == NULL && root -> right == NULL){
            if(sum == targetSum){
                return true;
            }
            else{
                return false;
            }
        }

        bool leftSum = solve(root -> left, targetSum, sum, res);
        bool rightSum = solve(root -> right, targetSum, sum, res);
        
        return leftSum || rightSum;
    }

    bool hasPathSum(TreeNode* root, int targetSum) {
        int sum = 0;
        int res = false;
        return solve(root, targetSum, sum, res);
    }
};

/*
Basically har node pe ham ek sum maintain krte chl rhe h inorder m.
jese hi hame leaf node mili vese hi apna sum check krlo agr target sum k equal h to true return krdo varna false.
 */