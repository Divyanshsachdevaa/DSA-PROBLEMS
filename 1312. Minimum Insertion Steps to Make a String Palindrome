class Solution {
public:
    int solve(string& s, int i, int j){
        if(i > j){
            return 0;
        }

       int ans = 0;
        if(s[i] == s[j]){
            ans = solve(s, i+1, j-1); 
        }
        else if(s[i] != s[j]){
            ans = 1 + min(solve(s, i, j-1), solve(s, i+1, j));
        }
        return ans;
    }

    int solveByMem(string& s, int i, int j, vector<vector<int>>& dp){
        if(i > j){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }

       int ans = 0;
        if(s[i] == s[j]){
            ans = solveByMem(s, i+1, j-1, dp); 
        }
        else if(s[i] != s[j]){
            ans = 1 + min(solveByMem(s, i, j-1, dp), solveByMem(s, i+1, j, dp));
        }

        dp[i][j] = ans;
        return dp[i][j];
    }

    int solveByTab(string& s){
        vector<vector<int>> dp(s.length()+1, vector<int> (s.size()+1, 0));
        for(int i = s.size()-1; i>=0; i--){
            for(int j = s.size()-1; j>=0; j--){
                int ans = 0;
                if(s[i] == s[j]){
                    ans = dp[i+1] [j-1]; 
                }
                else if(s[i] != s[j]){
                    ans = 1 + min(dp[i] [j-1], dp[i+1] [j]);
                }
                dp[i][j] = ans;
            }
        }
        return dp[0][s.size()-1];
    }

    int minInsertions(string s) {
        int e = s.length()-1;
        vector<vector<int>> dp(s.length()+1, vector<int> (s.size()+1, -1));
        return solveByMem(s,0, e, dp);
    }
};