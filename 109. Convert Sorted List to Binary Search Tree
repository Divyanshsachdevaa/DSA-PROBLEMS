// sorted means inorder(LNR) just treat L as left part R as rightpart and by taking middle
// node as root start writing your solution.Visulalize to divide List into two halves 
// by taking n/2 as left and n-n/2-1 as right part. Connect root with left and right update head when needed and return the root.
 
class Solution {
public:
    int findLength(ListNode* &head){
        if(head == NULL){
            return 0;
        }
        ListNode* temp = head;
        int length = 0;
        while(temp != NULL){
            length++;
            temp = temp -> next;
        }
        return length;
    }
    
    TreeNode* solve(ListNode* &head, int n){
        if(head == NULL || n <= 0){
            return NULL;
        }

        TreeNode* leftTree = solve(head, n/2);

        TreeNode* root =new TreeNode(head -> val);
        root -> left = leftTree;
        head = head -> next;

        TreeNode* rightTree = solve(head,n - n/2 - 1);
        root -> right = rightTree;

        return root;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        int n = findLength(head);
        return solve(head,n);
    }
};