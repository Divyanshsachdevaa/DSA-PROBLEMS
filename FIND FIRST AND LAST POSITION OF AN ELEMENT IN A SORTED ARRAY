//TIME COMPLEXITY => 2*O(log n)
//SPACE COMPLEXITY => O(1)
//step1:- Use simple binary search to find target
//step2:- Once we found the target as mid then move to right part to find stating index of target
//step3:- again implement binary search to find target as mid then in order to find last index move to left part
//step4:- return first and last index.

class Solution {
private:
    int first(vector<int>& nums ,int target){
        int s = 0 ;
        int e = nums.size()-1;
        int first = -1;
        while(s<= e){
            int m = s+(e-s)/2;
            if(nums[m] == target){
                first = m;
                e = m - 1;
            }
            else if(nums[m] < target){
                s = m + 1;
            }
            else{
                e = m - 1;
            }
        }
        return first;
    }    

    int last (vector<int>& nums ,int target){
        int s = 0 ;
        int e = nums.size()-1;
        int last = -1;
        while(e >= s){
            int m = s+(e-s)/2;
            if(nums[m] == target){
                last = m;
                s = m + 1;
            }
            else if(nums[m] < target){
                s = m + 1;
            }
            else{
                e = m - 1;
            }
        }
        return last;
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        return {first(nums,target) , last(nums,target)};
    }
};
