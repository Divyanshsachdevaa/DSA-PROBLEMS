/*
INORDER = SORTED using this we can traverse the tree in inorder and decrease k at every node
when k reacehes 0 means that is the kth smallest node of tree.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solve(TreeNode* &root , int &k){
        if(root == NULL){
            return NULL;
        }
        TreeNode* left = solve(root -> left, k);
        if(left != NULL){
            return left;
        }
        k--;
        if(k == 0){
            return root;
        }
        TreeNode* right = solve(root -> right, k);
        return right;
    }
    int kthSmallest(TreeNode* root, int k) {
        TreeNode* ans = solve(root, k);
        return ans -> val;
    }
};